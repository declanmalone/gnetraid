/*
   This file was generated by ./fast_gf2_method_chooser.pl
   DO NOT MAKE ANY EDITS TO THIS FILE OR THEY MAY BE LOST

   File (c) Declan Malone 2009. Licensed under version 3 of the GPL.

   For full details of license, see:

   http://www.gnu.org/licenses/gpl-3.0.html
*/

/*
  Structure definition. This structure holds details such as table
  pointers and polynomial which the macros need to save and access in
  order to call the optimised routines with the correct arguments.
*/

struct gf2_fast_maths {
  int width;  /* width in bits */
  int rc;     /* return code from init */
  union {
    gf2_u8 u8;
    gf2_u8 u16;
    gf2_u8 u32;
  } polynomial;
  union {
    gf2_u8 u8;
    gf2_u8 u16;
    gf2_u8 u32;
  } generator;
  union {
    gf2_s8  *s8;
    gf2_s16 *s16;
    gf2_s32 *s32;
    gf2_u8  *u8;
    gf2_u16 *u16;
    gf2_u32 *u32;
  } table1;
  union {
    gf2_s8  *s8;
    gf2_s16 *s16;
    gf2_s32 *s32;
    gf2_u8  *u8;
    gf2_u16 *u16;
    gf2_u32 *u32;
  } table2;
  union {
    gf2_s8  *s8;
    gf2_s16 *s16;
    gf2_s32 *s32;
    gf2_u8  *u8;
    gf2_u16 *u16;
    gf2_u32 *u32;
  } table3;
  union {
    gf2_s8  *s8;
    gf2_s16 *s16;
    gf2_s32 *s32;
    gf2_u8  *u8;
    gf2_u16 *u16;
    gf2_u32 *u32;
  } table4;
  union {
    gf2_s8  *s8;
    gf2_s16 *s16;
    gf2_s32 *s32;
    gf2_u8  *u8;
    gf2_u16 *u16;
    gf2_u32 *u32;
  } table5;
};

/* initialise u8 to use long multiply, invert, etc. */
#define gf2_fast_u8_init(OBJ,POLY,GEN) ( \
  POLY && (OBJ=(struct gf2_fast_maths *) \
    malloc(sizeof(struct gf2_fast_maths))) ? ( \
  OBJ->polynomial.u8=POLY, OBJ->width=8, \
  OBJ->rc=0) : -1 )

#define gf2_fast_u8_deinit(OBJ) ( \
  free(OBJ))

#define gf2_fast_u8_mul(OBJ,A,B) ( \
  gf2_long_mod_multiply_u8(A,B,OBJ->polynomial.u8))

#define gf2_fast_u8_inv(OBJ,A) ( \
  gf2_long_mod_inverse_u8(A, OBJ->polynomial.u8))

#define gf2_fast_u8_div(OBJ,A,B) ( \
  gf2_long_mod_multiply_u8(A, \
    gf2_long_mod_inverse_u8(B, OBJ->polynomial.u8), \
    OBJ->polynomial.u8 \
  ))

#define gf2_fast_u8_pow(OBJ,A,B) ( \
  gf2_long_mod_power_u8(A,B,OBJ->polynomial.u8))

/* initialise u16 to use long multiply, invert, etc. */
#define gf2_fast_u16_init(OBJ,POLY,GEN) ( \
  POLY && (OBJ=(struct gf2_fast_maths *) \
    malloc(sizeof(struct gf2_fast_maths))) ? ( \
  OBJ->polynomial.u16=POLY, OBJ->width=16, \
  OBJ->rc=0) : -1 )

#define gf2_fast_u16_deinit(OBJ) ( \
  free(OBJ))

#define gf2_fast_u16_mul(OBJ,A,B) ( \
  gf2_long_mod_multiply_u16(A,B,OBJ->polynomial.u16))

#define gf2_fast_u16_inv(OBJ,A) ( \
  gf2_long_mod_inverse_u16(A, OBJ->polynomial.u16))

#define gf2_fast_u16_div(OBJ,A,B) ( \
  gf2_long_mod_multiply_u16(A, \
    gf2_long_mod_inverse_u16(B, OBJ->polynomial.u16), \
    OBJ->polynomial.u16 \
  ))

#define gf2_fast_u16_pow(OBJ,A,B) ( \
  gf2_long_mod_power_u16(A,B,OBJ->polynomial.u16))

/* Initialise u32 to use optimised method 3 */
#define gf2_fast_u32_init(OBJ,POLY,GEN) (\
  POLY && (OBJ=(struct gf2_fast_maths *) \
  malloc(sizeof(struct gf2_fast_maths))) ? ( \
  OBJ->width = 32, \
  OBJ->rc=gf2_fast_u32_init_m3( \
    OBJ->polynomial.u32=POLY, \
    & OBJ->table1.u16 /* lmul_table */, \
    & OBJ->table2.u16 /* rmul_table */, \
    & OBJ->table3.u32 /* shift_tab */ \
  ) ? (free(OBJ), -1) : 0 ) : -1 )

#define gf2_fast_u32_deinit(OBJ) (\
  gf2_fast_u32_deinit_m3( \
    OBJ->table1.u16 /* lmul_table */, \
    OBJ->table2.u16 /* rmul_table */, \
    OBJ->table3.u32 /* shift_tab */ \
  ), free(OBJ) )

#define gf2_fast_u32_mul(OBJ,A,B) ( \
  gf2_fast_u32_mul_m3( \
    OBJ->table1.u16 /* lmul_table */, \
    OBJ->table2.u16 /* rmul_table */, \
    OBJ->table3.u32 /* shift_tab */, \
    A, \
    B  \
  ))

#define gf2_fast_u32_inv(OBJ,A) ( \
   gf2_fast_u32_inv_m3(\
    A, \
    OBJ->polynomial.u32  \
  ))

#define gf2_fast_u32_div(OBJ,A,B) ( \
  gf2_fast_u32_div_m3( \
    OBJ->table1.u16 /* lmul_table */, \
    OBJ->table2.u16 /* rmul_table */, \
    OBJ->table3.u32 /* shift_tab */, \
    A, \
    B, \
    OBJ->polynomial.u32  \
  ))

#define gf2_fast_u32_pow(OBJ,A,B) ( \
  gf2_long_mod_power_u32(A,B,OBJ->polynomial.u32))

