#!/usr/bin/perl -w      # -*- Perl -*-

use strict;
use warnings;

use Crypt::IDA::ShareFile ":all";

use File::Compare;
use File::Glob ':glob';

use Filesys::Df;
use Getopt::Long;
use File::Find;
use File::Path;
use File::Copy;
use Cwd qw(getcwd abs_path);
use File::Temp qw(tempfile);

##
### Hard-coded details about where my media files are, where the
### shares should go and how they should be split.
###
### BEWARE changing these!
##

my ($quorum,$nshares,$kwidth)=(3,4,1);
my @drive_list = ('Cathy', 'Janice', 'Tomoko', 'Midori');
my %drive_hash = map { $_ => 1 } @drive_list;

# path is where the canonical copy of the archive should be found
my %archives = (
		"tv"          => {
				  drive => "Cathy",
				  path => "/video/tv",
				 },
		"movies"      => {
				  drive => "Janice",
				  path => "/video/movies",
				 },
		"music"       => {
				  drive => "Tomoko",
				  path => "/music",
				 },
		"documentary" => {
				  drive => "Midori",
				  path => "/video/documentary",
				 },
		"standup"     => {
				  drive => "Midori",
				  path => "/video/standup",
				 },
		"shorts"     => {
				  drive => "Midori",
				  path => "/video/shorts",
				 },
		);
my $share_root = "/shares";

# link_dir stores symbolic links to the root of each drive;
# see comments on 'config' operation below
my $link_dir = "$ENV{HOME}/.media-raid";

##
### end of hard-coded options
##

# global variables set up by getopt, used by X_function subs
my ($need_help, $dry_run, $verbose, $clobber, $norecurse) = (0,0,0,0,0);

# Support routine; determines if file/dir is managed in a particular 
# archive. As a side effect it sets these two global variables so that
# subs called by File::Find can be location-aware.
#
# This routine only checks that a file is being managed, but does no
# checking of the actual existence or validity of the sharefiles. For
# that, see find_sharefile_info.
my ($in_drive,$in_archive,$in_root) = (("") x 3);
sub find_archive_info {

  $_= shift;

  $_= abs_path($_);
  unless (m|^/media|) {
    warn "File '$_' not in /media\n";
    return 0;
  }

 ($in_drive,$in_archive) = ("","");
  foreach my $drive (@drive_list) {
    if (m|^/media/$drive|) {
      $in_drive=$drive;
      last;
    }
  }
  unless ($in_drive) {
    warn "File '$_' not in media drive\n";
    return 0;
  }

  foreach my $archive (keys %archives) {
    my $archive_drive = $archives{$archive}->{drive};
    next if ($archive_drive ne $in_drive);
    my $archive_path = "/media/$archive_drive" .
      $archives{$archive}->{path};
    next unless (/^$archive_path/);
    $in_archive = $archive;
  }
  unless ($in_archive) {
    # we might be passed a directory that corresponds to an archive
    # directory, but the supplied drive path is wrong; in that case,
    # print a different error message to direct user to the main
    # archive.
    my ($main_archive,$main_archive_drive,$wrong_drive) = ("","","");
    foreach my $archive (keys %archives) {
      my $archive_path = $archives{$archive}->{path};
      if (m|^/media/(\w+)$archive_path|) {
	$wrong_drive = $1;
	$main_archive = $archive;
	$main_archive_drive = $archives{$archive}->{drive};
	last;
      }
    }
    if ($main_archive) {
      warn "File '$_' is not in main '$main_archive' archive\n";
      warn "-- Change '$wrong_drive' to '$main_archive_drive' and try again\n";
    } else {
      warn "File '$_' not in any known archive\n";
    }
    return 0;
  }
  $in_root=$archives{$in_archive}->{path};
  return 1;
}

#
# We need to look at sharefile info in a few places, so this routine
# takes care of checking for the existence of sharefiles corresponding
# to a managed file as well as extracting data from the file headers.
#

sub find_sharefile_info {
  my $original_file = shift;
  my $archive = shift;

  my $original_size = (stat $original_file)[7];
  my $share_size;

  my $sharedata = {
		   nshares => 0,
		   viable => 0,
		   headers => { },
		   file_length => undef,
		  };

  my $file_length = undef;

  # values read from header
  my ($k,$w) = (undef,undef);
  my ($chunk_start,$chunk_next,$header_size) = (undef,undef,undef);

  my $header_info;

  my $relative_file = $original_file;
  $relative_file =~ s|/media/\w+||;

  my $archive_path = $archives{$archive}->{path};
  $relative_file =~ s|$archive_path||;


  foreach my $drive (@drive_list) {

    # first some basic file checks to see if the file exists
    my $sharefile;
    $sharefile = "/media/$drive$share_root" .
      "$archive_path/$relative_file.sf";

#    warn "$sharefile\n";

#    next unless (-e $sharefile);

    # must use functions internal to Crypt::IDA::ShareFile to
    # open the file and read its headers
    my $istream;
    $istream =
      Crypt::IDA::ShareFile::sf_mk_file_istream($sharefile);

    unless (defined $istream) {
      #warn "failed to open istream '$sharefile'\n";
      next;
    }

    $header_info=
      Crypt::IDA::ShareFile::sf_read_ida_header($istream,
						$k,$w,
						$chunk_start,
						$chunk_next,
						$header_size);

    $k           = $header_info->{k};
    $w           = $header_info->{w};
    $chunk_start = $header_info->{chunk_start};
    $chunk_next  = $header_info->{chunk_next};
    $header_size = $header_info->{header_size};

    $share_size = $chunk_next - $chunk_start;
    $istream->{CLOSE}->();

    if ($header_info -> {error}) {
      warn $header_info->{error_message};
      return undef;
    }

    # warn "Actual size: " . ((stat $sharefile)[7]) . "\n";
    # warn "\$share_size: $share_size\n";
    # warn "\$header_size: $header_size\n";

    if ((stat $sharefile)[7] >= ($share_size / $k) + $header_size) {
      #     warn "share file size OK\n";
      $sharedata->{headers}->{$drive} = $header_info;
      $sharedata->{nshares}++;
    }
  }

  $sharedata->{file_length}=$share_size;
  $sharedata->{viable}    = 0;
  $sharedata->{perfect}   = 0;

  if ($sharedata->{nshares} >= $quorum and $original_size == $share_size) {
    #warn "viable/perfect\n";
    $sharedata->{viable}  = 1;
    $sharedata->{perfect} = 1 if $sharedata->{nshares} == $nshares;
  }

  if ($sharedata->{nshares}) {
    return $sharedata;
  } else {
    return undef;
  }

}

# called from File::Find via scan_function
sub scan_file_or_dir {

  my $absfile  = abs_path($File::Find::name);
  my $filename = $absfile;

  # modify filename to make it suitable for printing relative to
  # archive root (keeping absfile as original absolute filename)
  $filename =~ s|^/media/$in_drive||;
  $filename =~ s|^$in_root/?||;

  my $copies = 100;

  my ($ticks,$good_tick) = ("-", "?");

  my ($share_copy,$other_copy);
  my @statinfo;

  # First tick determines if we have a working shared copy
  my $sharecount = 0;
  if (-d) {
    $good_tick = "d";
    foreach my $drive (@drive_list) {
      $share_copy = "/media/$drive$share_root/$in_root/$filename";
      if (-d $share_copy) {
	++$sharecount;
      }
    }
  } else {

    # We have to examine the headers of the share files ...


    my $sharehash = find_sharefile_info($absfile,$in_archive);

    $good_tick = "X";		# actually not good at all
    if (defined($sharehash)) {

      if ($sharehash->{viable}) {
	$good_tick = "!" if $sharehash->{viable};
	$good_tick = "*" if $sharehash->{perfect};
      }
      $sharecount = $sharehash->{nshares};

    } else {
      $sharecount = 0;
    }
  }

  $ticks = (
	    $sharecount ?
	    ( ($sharecount == $nshares) ? $good_tick : "X" )
	    : "-"
	   );
  if ($ticks ne "-" and $sharecount >= $quorum) {
    $copies += (100 * $sharecount / $quorum);
  }

  # checking for other (unsplit) 100% copies is easy...

  if (-d) {

    foreach my $drive (@drive_list) {
      $other_copy = "/media/$drive/$in_root/$filename";
      if ($in_drive eq $drive) {
	$ticks .= "D";
      } else {
	if (-d $other_copy) {
	  $ticks .= "d";
	  $copies+=100;
	} elsif (-f $other_copy) {
	  $ticks .= "X";
	} else {
	  $ticks .= "-";
	}
      }
    }

  } else { # regular file

    foreach my $drive (@drive_list) {
      $other_copy = "/media/$drive/$in_root/$filename";
      if ($in_drive eq $drive) {
	$ticks .= "1";
      } else {
	if (-d $other_copy) {
	  $ticks .= "X";
	} elsif (-f $other_copy) {
	  my $our_size = (stat $absfile)[7];
	  my $other_size = (stat $other_copy)[7];
	  if ($our_size == $other_size) {
	    $ticks .= "*";
	    $copies+=100;
	  } else {
	    $ticks .= "X";
	  }
	} else {
	  $ticks .= "-";
	}
      }
    }

  }

  print "$ticks  ";
  $copies = int($copies);
  print "$copies\%" . (" " x (5 - (length "$copies"))) . "  ";
  print "$in_archive" . (" " x (length("documentary") - length($in_archive)));
  print "  $filename\n";
}

sub scan_function {
  my ($dir, $canonical_dir);
  # my $cwd = getcwd; # abs_path removes need for this

  if ($#_ < 0) {
    warn "no args supplied to scan_function\n";
    return;
  }

  # print some headers
  print "+-- shares\n";
  for my $i (0 .. $#drive_list) {
    print "|" x ($i + 1);
    print "+";
    print "-- " . $drive_list[$i] . "\n";
  }
  print "|" x ($#drive_list +2) . "\n";
  print "v" x ($#drive_list +2) . "  Copies  Archive      File\n";
  my $dashes = "-" x ($#drive_list +2) . "  ------  -----------  ";
  print $dashes . ("-" x (79 - length $dashes)) . "\n";


  foreach my $dir (map { abs_path $_ } @_) {
    next unless find_archive_info($dir);
    find({
	  wanted => \&scan_file_or_dir,
	  no_chdir => 1,
	  preprocess => sub { sort { (lc $a) cmp (lc $b) } @_ },
	 }, $dir);
  }
}

# Print codes based on testing original file vs shares:
#
# --  No shares to compare with
# ==  Shares exist and is equal to original
# !#  Bad number of shares (< quorum)
# !=  File != shares
# !<  Shares exist, but is smaller than original
# !E  Some error with comparison
#

sub cmp_file_or_dir {

  my $infile=$File::Find::name;
  my $dir = $File::Find::dir;

  my $filespec;

  my $shortname = $infile;
  $shortname =~ s|^/media/$in_drive||;
  $shortname =~ s|^$in_root||;

  # warn "Comparing $infile\n";

  # return if directory
  if (-d) {
    if ($verbose > 2) {
      warn "Split entering directory $infile\n";
    }
    return;
  }

  # calculate filespec via our symbolic links
  $filespec = $infile;
  $filespec =~ s|^/media/\w+/|$link_dir/\%s/|;
  # $filespec =~ s|$|.sf-\%s|; # sf_split doesn't globally replace %s
  $filespec .= ".sf";

  # warn "Filespec is $filespec\n";

  # make a list of up to $quorum share filenames
  my @infiles=();
  for my $i (0..$nshares-1) {	# share numbers count from zero
    my $sharefile = sf_sprintf_filename($filespec,$infile,0,$i);
    # warn "Adding share $sharefile\n";
    if (-f $sharefile) {
      push @infiles,$sharefile;
      last if $#infiles == $quorum - 1;
    }
  }

  # do we have non-viable number of shares?
  if ($#infiles < $quorum - 1) {
    if ($#infiles > -1) {
      warn " !# $infile $shortname\n";
      return;
    }
    warn " -- $in_archive $shortname\n";
    return;
  }

  # we have shares, so extract to temp file and compare
  my ($fh, $tmpfile) = tempfile() or die "Can't make temp file\n";
  #close($fh);			# don't need

  #  warn "Writing tmp file $tmpfile\n";

  my $bytes=
    sf_combine(
	       infiles => [@infiles],
	       outfile => $tmpfile,
	      );

  if ((stat($infile))[7] > $bytes) {
    warn " !< $in_archive $shortname\n";
    return;
  }

  # do the compare
  my $rc=compare($tmpfile,$infile);
  if ($rc == 0) {
    warn " == $in_archive: $shortname\n";
  } elsif ($rc == -1) {
    warn " !E $in_archive: $shortname\n";
  } else {
    warn " != $in_archive: $shortname\n";
  }

  unlink $tmpfile;

}

sub cmp_function {
  my ($dir, $canonical_dir);

  if ($#_ < 0) {
    warn "no args supplied to cmp_function\n";
    return;
  }

  foreach my $dir (map { abs_path $_ } @_) {
    next unless find_archive_info($dir);
    find({
	  wanted => \&cmp_file_or_dir,
	  no_chdir => 1,
	  preprocess => sub { sort { (lc $a) cmp (lc $b) } @_ },
	 }, $dir);
  }
}


# called on each file/dir by split_function via File::Find
sub split_file_or_dir {

  my $infile=$File::Find::name;
  my $filespec;

  my $shortname = $infile;
  $shortname =~ s|^/media/$in_drive||;
  $shortname =~ s|^$in_root||;

  # we can't split directories
  if (-d) {
    if ($verbose > 2) {
      warn "Split entering directory $infile\n";
    }
    return;
  }

  # calculate filespec using links in our private directory to
  # put shares in correct places (%s is share number)
  $filespec = $infile;
  $filespec =~ s|^/media/\w+/|$link_dir/\%s/|;
  # $filespec =~ s|$|.sf-\%s|; # sf_split doesn't globally replace %s
  $filespec .= ".sf";

  # The sf_split routine will fail if the target directories don't
  # exist. Use File::Path::mkpath to create them here. We could use the
  # symbolic links stored in our link_dir, but it's probably safer to
  # use absolute paths so we do that instead.
  for my $i (0..$nshares-1) {	# note shares count from 0 up
    my $dir_to_make = $File::Find::dir;
    my $drive = $drive_list[$i];
    $dir_to_make =~ s|^/media/\w+/|/media/$drive$share_root/|;
    unless (-d $dir_to_make) {
      if ($dry_run) {
	warn "split would mkpath '$dir_to_make'\n" if ($verbose > 1);
      } else {
	warn "split: mkpath '$dir_to_make'\n" if ($verbose);
	mkpath ($dir_to_make);
      }
    }
  }

#  warn "infile: $infile\n";
#  warn "in_archive: $in_archive\n";
  my $sharehash = find_sharefile_info($infile,$in_archive);


  # Status code
  my $ok = "OK";

  if (defined($sharehash)) {


#    warn "have sharehash:\n";
#    warn "have viable: " . $sharehash->{viable} . "\n";
#    warn "have nshares: " . $sharehash->{nshares} . "\n";


    # unlike scanning, where we just want to know if shares are
    # viable, when splitting, we will overwrite if they're not perfect
    if ($sharehash->{perfect}) {
      if (!$clobber) {
	warn " -- $in_archive: $shortname\n";
	return;
      } elsif ($sharehash->{viable}) {
	$ok = "-o" if $sharehash->{viable}; # overwriting
      } else {
	$ok = "!!"; # doesn't get here atm
      }
    }
  }

  if ($dry_run) {
    warn " -n $in_archive: $shortname\n";

  } else {

    # warn "Splitting '$infile'.\n"
    #	. "(filespec is $filespec)\n"
    #  if $verbose > 0;

    die "Error splitting $infile. Quitting.\n" unless
      sf_split( filename => $infile,
		quorum   => $quorum,
		shares   => $nshares,
		width    => $kwidth,
		# rand     => $rand,
		# bufsize  => $bufsize,
		# n_chunks => $n_chunks,
		# in_chunk_size  => $in_chunk_size,
		# out_chunk_size => $out_chunk_size,
		# out_file_size  => $out_file_size,
		filespec => $filespec
	      );
    warn " $ok $in_archive: $shortname\n";
  }
}


sub split_function {

  my ($dir, $canonical_dir);
  # my $cwd = getcwd; # abs_path removes need for this

  if ($#_ < 0) {
    warn "no args supplied to split_function\n";
    return;
  }

  my $processed = 0;

  # do some rudimentary checking on each dir
  foreach my $dir (map { abs_path $_ } @_) {
    next unless find_archive_info($dir);
    find({
	  wanted => \&split_file_or_dir,
	  no_chdir => 1,
	  preprocess => sub { sort { (lc $a) cmp (lc $b) } @_ },
	 }, $dir);
    ++$processed;
  }

}

# Move file file ... target
sub move_function {

  my (@sources,$target);

  die "Too few arguments to move.\n" unless @_ > 1;

  @sources = @_;
  $target = abs_path pop @sources;

  if (@sources > 1) {
    # target must be an existing directory if moving multiple files
    die "Target must be a dir for multiple sources.\n" unless -d $target;
  }

  my ($target_archive,$target_root);

  # this should work even on a nonexistent filename, provided the
  # directory part is valid.
  unless (find_archive_info(abs_path $target)) {
    die "Target is not in a managed dir.\n" unless find_archive_info($target)
  }
  ($target_archive,$target_root) = ($in_archive,$in_root);

  # Process each source file
  my ($source_archive,$source_root);
  foreach my $source (map { abs_path $_ } @sources) {

    # abs_path returns nothing if a garbage path is given, so the
    # first part of the test below suppresses some less than useful
    # error messages from Perl about uninitialised variables
    unless ($source ne '' and -e $source) {
      warn "Source file '$source' doesn't exist.\n";
      next;
    }

    unless (find_archive_info($source)) {
      warn "Source is not in managed directory.\n";
      next;
    }

    # save in_archive and in_root for source
    ($source_archive,$source_root) = ($in_archive,$in_root);

    for my $i (0..$nshares-1) {	# share numbers count from zero

      my $sfilespec = $source;
      $sfilespec =~ s|^/media/\w+/|$link_dir/\%s/|;
      $sfilespec .= ".sf" unless -d $source;

      my $tfilespec = $target;
      $tfilespec =~ s|^/media/\w+/|$link_dir/\%s/|;
      $tfilespec .= ".sf" unless -d $source or -d $target;

      my $sourceshare = sf_sprintf_filename($sfilespec,$source,0,$i);
      my $targetshare = sf_sprintf_filename($tfilespec,$target,0,$i);

      # warn "Testing '$sourceshare'\n";
      if (-e $sourceshare) {
	# (don't) make target directory if it doesn't already exist
	my $targetsharedir = $targetshare;
	$targetsharedir =~ s|[^/]+$||;
	unless (0 and -d $targetsharedir) { # commented out
	  mkpath $targetsharedir;
	}

	unless (move($sourceshare, $targetshare)) {
	  warn "Problem moving '$source': $!\n";
	}
      }
    }

    # move original file/directory only after moving shares since it
    # messes up the -d $source test otherwise
    unless (move ($source,$target)) {
      warn "Problem moving '$source': $!\n";
      next;
    }

  }

}

# This is a support routine for lint_delint_function. It does minimal
# checking to see if a share exists. Unlike find_sharefile_info, it
# doesn't assume that a master copy of the file exists.
sub check_for_shares {
  my $relative_file = shift;

  # assume we have access to $in_drive, $in_archive and $in_root globals

  my $hash = {
	      exists => 0,
	      type => "",	# "file" or "dir"
	      nshares => 0,
	      sharenums => [],
	     };

  for (0..$nshares) {
    my $sharefile;

    # First check for dirs. They don't have a .sf extension
    $sharefile = "$link_dir/$_/$in_root/$relative_file";
    if (-d $sharefile) {
      die "$sharefile (dir) conflicts with existing file\n"
	if $hash->{type} eq "file";
      $hash->{type} = "dir";
      $hash->{exists} = 1;
      push @{$hash->{sharenums}}, $_;
      $hash->{nshares}++;
    } elsif (-d "$sharefile.sf") {
      die "$sharefile.sf (file) conflicts with existing dir\n"
	if $hash->{type} eq "dir";
      $hash->{type} = "file";
      $hash->{exists} = 1;
      push @{$hash->{sharenums}}, $_;
      $hash->{nshares}++;
    }
  }

  return $hash;

}

sub recursive_lint {

  my $relative_path = shift;
  my $file = shift;		# possibly undef
  my $sharelist = shift;	# listref

  #  warn "relative: $relative_path; file: $file; shares [" . 
  #   (join ",", @$sharelist) . "]\n";


  my @dirs =();
  my @dir_shares =();		# list of listrefs
  my @files=();
  my @file_shares=();		# list of listrefs
  my $dh;

  if (defined ($file)) {
    # save the given file for processing later, but don't scan dir
    push @files, "$relative_path/$file";
    push @file_shares, $sharelist;

  } else {

    # Populate the list of subdirs and files. The caller has already
    # determined which shares exist, and we will prune that list if
    # it turns out a share doesn't exist for a given subdir.

    unless ($norecurse) {
      # We do two readdirs rather than just one. The first checks
      # dirs, while the second one checks for files. We're trading
      # off slower speed for less memory usage.

      my %known_subdirs;	# maps subdir to share list
      foreach my $known_share (@$sharelist) {
	my $this_dir="$link_dir/$known_share/$in_root/$relative_path";
	opendir my $dh,$this_dir or die "Dir $this_dir disappeared\n";

	while (my $subdir = readdir $dh) {
	  next unless -d "$this_dir/$subdir";
	  next if $subdir =~ m|^\.(\.)?$|; # avoid . and ..

	  if (exists($known_subdirs{$subdir})) {
	    push @{$known_subdirs{$subdir}},$known_share;
	  } else {
	    $known_subdirs{$subdir}=[$known_share];
	  }
	}
      }

      # sort list of subdirs and build associated share lists.
      map {
	push @dirs, $_;
	push @dir_shares, $known_subdirs{$_};
      } sort { $a cmp $b } keys %known_subdirs;

      # %known_subdirs goes out of scope after this, freeing memory
    }

    # The recursive bit; shifting off elements of the lists means we
    # free up a little memory each time
    if (@dirs) {
      my ($subdir,$sharelist);
      while ($subdir = shift @dirs) {
	$sharelist=shift @dir_shares;
	recursive_lint("$relative_path/$subdir",undef,$sharelist);
	if ($clobber) {
	  map {
	    rmdir "$link_dir/$_/$in_root$relative_path/$subdir"
	  } @$sharelist;
	}

#	else {
#	  print "rmdir $link_dir/*$in_root$relative_path/$subdir\n"
#	    if $verbose;
#	}
      }
    }

    # With files in this dir, we could just process them as we
    # readdir them, but it's nicer to sort them as with dirs, and
    # the code is clearer if we don't have to treat passed files and
    # found files differently.
    my %known_files;		# maps subdir to share list
    foreach my $known_share (@$sharelist) {
      my $this_dir="$link_dir/$known_share/$in_root/$relative_path";
      opendir my $dh,$this_dir or die "Dir $this_dir disappeared\n";

      while (my $file = readdir $dh) {
	next if $file =~ m|^\.(\.)$|; # avoid . and ..
	next unless -f "$this_dir/$file"; # skip dir

	if (exists($known_files{$file})) {
	  push @{$known_files{$file}},$known_share;
	} else {
	  $known_files{$file}=[$known_share];
	}
      }
    }

    # sort and save file list; don't include viable shares for
    # existing master files in the list
    foreach (sort { $a cmp $b } keys %known_files) {
      my $orig = $_;
      $orig =~ s/\.sf$//;
      if (-f "/media/$in_drive/$in_root/$relative_path/$orig"
	and @{$known_files{$_}} >= $quorum) {
	warn " -- $relative_path/$_\n" if $verbose;
	next;
      }

      push @files, $_;
      push @file_shares, $known_files{$_};
    }

  }


  # process file lists
  foreach my $file (@files) {

    my $sharelist = shift @file_shares;

    foreach my $share (@$sharelist) {
      my $sharefile = "$link_dir/$share$in_root/$relative_path/$file";
      if ($clobber) {
	unlink $sharefile;
      } else {
	print " rm $sharefile\n";
      }
    }
  }
}

# Called for both lint and delint command args. The determination of
# whether to actually delete or not is down to whether the $clobber
# variable is set or not. (so lint -o is the same as delint)
sub lint_delint_function {

  # In order to keep complexity down, I'm only going to allow
  # specifying directories here. I'm going to use abs_path on each dir
  # name (via find_archive_info), and that allows a file name only so
  # long as all but the last part of the path exists.

  # This is the only command that honours the norecurse flag; use it
  # to, eg, remove unwanted orphan backup files in a top-level
  # directory


  # recursive function to scan dirs depth-first

  foreach (@_) {

    next unless find_archive_info($_);

    my $absfile  = abs_path($_);
    my $filename = $absfile;

    # get relative file name
    $filename =~ s|^/media/$in_drive||;
    $filename =~ s|^$in_root/?||;

    my $hash = check_for_shares($filename);

    if ($hash->{exists}) {
      if ($hash->{type} eq "file") {
	recursive_lint(undef,$filename,$hash->{sharenums});
      } else {
	recursive_lint($filename,undef,$hash->{sharenums});
      }
    }

  }

}




# Modes of operation ('file' can be a file or directory)
#
# config
#
# * set up directory ~/.media-raid
# * create symbolic link 1 -> /media/Cathy
# * create other 3 symbolic links
# * (this is done because sf_split doesn't accept path names for outputs)
#
# split [files]
#
# * check that target drives are mounted
# * check to ensure we have space
# * call split routine
#
# commit
#
# * same as split, except that we delete redundant 100% copies
# * we should be able to call commit separately after split
#
# check [files]
#
# * a quick check that share files are sane wrt canonical files
# * check that at least quorum target drives are mounted
# * warn if we have quorum but not all shares
# * quick check of file sizes and share headers
#
# verify [files]
#
# * more thorough verification than 'check'; adds these checks:
# * combine to temporary file
# * compare output with original
#
# scan [files]
#
# * warn if not in canonical archive location for file
# * scan each drive for copy (path prefix + offset)
# * warn if partial copy exists
# * quick scan shares for copy (parse headers to find file length)
# * report on 100% copies, inconsistent copies and "raid" copies
# * report number of copies as total percentage
#
#
# recover [file]
#
# * check that we are in a canonical directory
# * check that target file doesn't already exist
# * check that we have quorum shares available
# * call combine
#
# extract [file]
#
# * same as recover, except we should not be in canonical dir
#
# lint [dir]
#
# * scans the *shares* to find files in the backup that don't exist in
#   the main archive (probably files that have been deleted or renamed
#   since the shares were created).
#
#
# delint [dir]
#
# * as with lint, above, but deletes shares that aren't accounted for
#   in the main archive (use with caution, after running lint)
#
#
# discard [file/dir]
#
# * Delete unwanted shares from backup. Use with caution, obviously.
#   This will only remove shares that correspond to existing files.
#   To delete shares that don't have corresponding master files any
#   more, use the lint/delint function.

my $help_text = <<EOT;
$0 - manage archive backups

Usage:

 $0 command [options] [files]

Options are:

 -h    help
 -n    dry run
 -v    verbose mode
 -l    "local" mode (no recursion) (applies in lint/delint modes only)

Commands are:

 split

 cmp

 scan

 commit

 lint

 delint

 move (currently doesn't move directories)

 ...

EOT

unless ($#ARGV >= 0) {
  die "Insufficient arguments; use -h for help\n";
}

my $command = shift @ARGV;
my $need_files = 0;

if      ($command eq "help") {
  $need_help = 1;
} elsif ($command eq "split") {
  $need_files = 1;
} elsif ($command eq "cmp") {
  $need_files = 1;
} elsif ($command eq "commit") {
  $need_files = 1;
} elsif ($command eq "scan") {
  $need_files = 1;
} elsif ($command eq "lint") {
  $need_files = 1;
} elsif ($command eq "delint") {
  $need_files = 1;
} elsif ($command eq "move") {
  $need_files = 2;
} elsif ($command eq "info") {
  1;
} elsif ($command =~ /^-/) {
  die "Option found when expecting command\n";
} else {
  die "Unknown command '$command'\n";
}

Getopt::Long::Configure ("bundling");
my $r=GetOptions ( "h|help"     => \$need_help,
		   "n|dry_run|dry-run" => \$dry_run,
		   "l|local|norecurse" => \$norecurse,
		   "v|verbose+" => \$verbose,
		   "o|overwrite|c|clobber" => \$clobber
		 );

die $help_text if $need_help;

# we can't use abs_path when moving files
# @ARGV = map { abs_path $_ } @ARGV;

die "Command '$command' needs $need_files file(s) as argument.\n"
  if $need_files and @ARGV < $need_files;

if      ($command eq "split") {
  split_function(@ARGV);
} elsif ($command eq "scan") {
  scan_function(@ARGV);
} elsif ($command eq "move") {
  move_function(@ARGV);
} elsif ($command eq "cmp") {
  cmp_function (@ARGV);
} elsif ($command eq "lint") {
  $clobber = 0;
  lint_delint_function(@ARGV);
} elsif ($command eq "delint") {
  $clobber = 1;
  lint_delint_function(@ARGV);
} else {
  die "Internally unsupported command '$command'\n";
}

